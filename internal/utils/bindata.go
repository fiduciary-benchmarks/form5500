// Code generated by go-bindata.
// sources:
// assets/.DS_Store
// assets/sql/.DS_Store
// assets/sql/form5500_search_view/create_view.sql
// assets/sql/schedule_c_providers/create_table.sql
// assets/sql/schedule_c_providers/select_sch_c_part1_item3.sql
// assets/sql/schedule_c_providers/select_sch_c_part_1_item2.sql
// assets/sql/zip_codes/create_search_function.sql
// assets/sql/zip_codes/create_table.sql
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x99\x5f\x6c\x14\x45\x1c\xc7\xe7\x7b\x3d\x60\x8f\xcd\xc2\x5c\x0b\x58\x8a\x90\x43\x12\x29\xf1\x9a\x5c\xcf\x60\xe5\x4f\xc2\xf5\x7a\x45\x6a\x69\x5a\xbd\xfe\x85\xda\xeb\xde\xed\x4a\x37\x6e\x77\x8f\xdb\xbd\x2b\x58\xab\xd5\x17\x0d\xf8\xf7\x41\x1f\x8c\x11\xa3\x08\xa8\x89\xff\xd1\x18\xf5\xc5\x44\x83\xfa\xe0\x83\xc4\x00\xf1\xc9\x07\x1f\x7d\x31\xf1\x4f\x62\x8c\x33\xbb\x73\xed\xb5\x50\x8c\x4f\x10\xd9\xef\xe5\xfa\x9d\xdf\xce\xfc\x66\x67\x66\x3f\xb7\x9b\xd9\x12\x42\x90\x2e\x6b\xad\x84\x34\xb2\xa2\x44\x7c\xa7\x32\xb9\xa2\x24\xf1\xbd\x4c\x21\xe1\xcb\x78\x7f\x2c\x9f\x38\xc5\xbc\x69\xe7\x59\xf4\x57\xbe\x78\xe5\xbe\x02\x05\x0a\x14\x28\x50\xa0\x40\xd7\x58\xf0\x4d\x5a\xe2\xb9\x1f\x28\x50\xa0\x1b\x58\xfc\xfe\x10\x13\x9e\x12\x3e\xeb\x3b\x44\x7d\x48\x78\xb8\x26\x87\x0a\x8f\x09\x4f\x09\x9f\xf5\x1d\xa2\x5d\x48\x78\x58\xb8\x24\x9c\x0a\x8f\x09\x4f\x09\x9f\xf5\x5d\xdc\xb4\x20\x36\x1f\x10\x67\x86\xd8\xa1\x80\x0a\x8f\x09\x4f\xfd\xc7\x49\x07\x0a\x74\x03\x89\xef\xdd\xeb\x88\x43\x0e\x13\x33\x3f\x55\xbb\x7f\x37\x0d\xc7\x4d\x24\x2e\x22\x54\x17\x5e\xb6\x7c\x85\x14\x59\x29\xf3\x0f\x8d\xae\xbc\x2f\x3b\x61\x4f\x65\x5d\xd5\x2d\x3b\x69\xb5\x74\xd0\x8b\x0c\x4d\xcf\x8b\x72\x9f\xea\x4e\x54\xcb\xfd\xb6\x6d\xce\x95\xd5\xfc\xa0\xa1\x4f\xe5\xe8\x9a\x0e\xdb\x72\x55\xc3\xd2\x4b\x35\xa9\xa3\x43\x86\xa5\xd9\x53\x69\xbb\x6c\x69\xce\xa8\x38\x38\x64\x68\xee\x44\x8e\xae\xed\x2b\xe9\x15\x96\xda\xa7\x5a\xfa\xa0\xe1\x18\x79\xc3\x34\xdc\xa3\x52\x84\x7f\x72\xb4\x69\x7a\xba\xe5\xf6\x64\x3c\xd6\x9a\x6c\xdb\x31\x13\x8f\x4d\xb7\xde\x99\x4c\xc4\x63\x6d\x6d\xc9\x99\x99\x28\x1a\x24\x69\xc3\xb6\xed\xed\x3d\x23\xc5\x99\x63\xaf\xbe\x76\xf2\xf5\x53\xa7\xcf\x7c\x79\xce\x9f\x78\xf5\x46\x42\x1a\x16\xad\xc8\xd7\xf3\x2b\xa2\x39\x05\x33\xcf\xe6\x40\xe6\x0f\x99\x4e\xa5\xcf\x5f\xa4\xd0\x13\xd5\x45\xba\x54\xb3\x48\xb2\xb2\xaa\x23\xd3\xb1\xa6\x73\x6f\x8e\xd2\xb2\xa3\xdf\xab\x9b\xaa\x6b\x54\xf4\x8c\xea\xea\x4e\x8e\xae\x76\xd8\x94\xbb\x0a\xb6\x25\xa6\x94\xa3\xd1\x82\x6a\x16\xca\xac\x91\xde\x6e\x9a\x59\xe3\x41\xdd\x19\x2a\xd8\x66\x79\xd2\xf2\x5a\x17\x4a\xb6\x69\xf6\xd9\x8e\xe1\x1a\xb6\x35\x32\xec\xea\x47\x5c\xde\xe6\xb2\xaa\xe1\x03\x8e\x5d\x72\x3b\xbc\xc4\x61\x83\xf5\xef\xb7\xaa\xe7\xe7\xe8\x2d\xf2\x16\xce\xa0\x5e\x72\x98\x47\x22\xd2\x9b\xab\x1b\x37\x6e\xbe\xf5\xb6\xc4\xf6\x9d\x7b\xce\xd3\x68\x7d\xc3\x9a\xb5\xb2\x7c\x80\xad\xb8\xe5\x1a\xf7\x1b\x7a\x69\x60\x8a\x2f\xfb\x88\xea\x14\x74\x4b\x33\xac\x43\x43\x15\xbe\xe6\xa6\xde\x6f\xa9\x93\x7a\x34\xfc\x48\x24\xe2\x65\xad\x6f\x52\xe4\x51\x8d\x8d\xbb\xc7\xd6\x78\x9e\x46\xcf\x4a\x7e\xcd\xa6\x26\x45\x39\xc8\x6b\x3a\x4a\x3a\xfb\xab\x49\x92\x77\xf8\x96\x2d\x8a\xdc\xef\xb0\x71\x51\x55\x34\xdc\xda\x2c\xcb\xfd\x0f\xb0\x0b\x4f\x1d\xd1\x69\xbc\x45\x56\x06\x4c\x35\xaf\x9b\x54\x8b\xf8\x69\xad\x49\x59\x19\xaa\xf8\x83\xa7\xdd\xe2\xe0\x1d\x6d\xb2\x32\x5c\xb0\x27\x27\xd9\xa0\x9d\x28\xe2\xe2\xf0\xae\xdd\x8a\x32\xc6\xcf\xbc\x5f\x75\xdc\xde\xa2\x6e\xb1\x51\x9d\x63\xa7\x6f\x88\xd6\x53\xa5\x49\x49\x4b\xd2\x08\xaf\x6d\xd7\x34\x5d\xdb\x52\xbd\xde\x5b\x52\xcd\xd5\x42\xc2\x2f\x50\xfe\x30\xda\x48\x12\x24\x4d\x06\xc9\x18\x29\x92\xa3\xe4\x38\x79\x81\x9c\x20\x1f\x92\xb3\xe4\x23\xf2\x31\xf9\x82\x7c\x4b\x7e\x20\x3f\x92\x9f\xc9\x2f\xe4\x57\xf2\x1b\xf9\x9d\xfc\x01\x60\x15\x28\xa2\xa8\xc7\x06\x6c\x45\x33\xb6\x21\x89\x36\xec\xc0\x4e\xec\x42\x06\x5d\xe8\xc6\x7e\xf4\x60\x10\xa3\x18\x43\x0e\xe3\x30\x70\x18\x0e\x5c\x94\xf1\x30\x1e\xc7\x31\x1c\xc7\x93\x78\x1e\x27\x71\x0a\xa7\x71\x06\xef\xe1\x7d\x7c\x80\xcf\xf1\x15\xbe\xc3\x05\x7f\x54\xa1\x2a\xb0\x77\x2d\xe4\x15\x97\x16\xd0\x29\x7e\xc2\xa1\xa7\x97\xa0\x73\x5f\xd7\xbe\x75\x77\x77\x5e\xbf\x74\x5e\x5c\xed\x33\xb9\xee\xa6\x46\x01\x69\x66\xee\x4a\x2f\xba\xb6\xb5\x90\x79\x64\xf9\xe8\x78\x48\x55\x91\xf1\xa8\x5d\xc0\xe9\xf9\xf5\x4d\x1b\x6e\xde\xb8\x89\x81\xc6\x9a\xe9\x47\x96\xc2\x9d\xae\xf0\xb9\xe2\xad\x19\xba\x0a\x95\x3c\x94\x78\xb8\xb5\x99\x85\x21\xc6\xbb\x1f\xc6\x5b\x14\x99\xd6\x79\x54\xf3\x90\x03\x4b\x97\x79\xfc\xf2\x90\xa1\x2a\xd3\xb0\x47\x38\x0f\x77\xed\x66\xb5\xcb\x3d\x90\x79\x98\x6a\x67\xb5\xc4\xff\x55\xf1\xb8\xb3\x99\xf5\x05\x29\x72\x15\x3a\xff\x85\xcd\x6f\xc8\xf7\xe4\x27\x8f\xcb\x3f\xc9\xdf\x58\x0e\x19\x8d\xd8\xcc\x88\x6c\x61\x34\xee\x41\x3b\x63\xb1\x13\x7b\xd1\x8b\x7b\x90\x45\x3f\x06\x18\x8d\xe3\xc8\xa3\x00\x0d\x93\xb0\x19\x93\x25\x46\xe5\x43\x8c\xc9\x59\x3c\x8a\xc7\x18\x95\x4f\xe1\x19\x3c\x8b\xe7\xf0\x22\x5e\xc2\xcb\x38\x81\x57\xf0\x06\xde\xc2\xdb\x78\x07\xef\xe2\x13\x7c\x8a\xcf\x7c\x4a\x17\x31\xda\xbd\x88\xd1\x0b\xf3\x8c\x56\xb2\x25\xcb\xb4\xad\x43\x64\x6e\x03\x1a\xe8\xda\xa8\xce\xb7\x46\xbe\xff\xef\x5c\xfa\xfd\x7f\xa0\x40\x81\xfe\xc7\x42\x38\x93\xcd\xa4\xc9\xd2\xf7\x63\xbe\xd7\x8e\xb1\xef\x78\x35\x81\x5c\xfd\x45\x00\x6a\xfe\x61\x78\xdd\xbd\x08\x08\x9e\xff\xc1\xf3\x3f\x10\xf9\x27\x00\x00\xff\xff\x2f\xfb\xd7\x56\x04\x20\x00\x00")

func assetsDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_assetsDs_store,
		"assets/.DS_Store",
	)
}

func assetsDs_store() (*asset, error) {
	bytes, err := assetsDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/.DS_Store", size: 8196, mode: os.FileMode(420), modTime: time.Unix(1485311046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x3b\x0e\xc2\x30\x10\x44\x77\x8c\x0b\x4b\x34\x2e\x29\xdd\x70\x00\x6e\x60\x45\xe1\x04\x5c\x80\x82\x2b\xd0\xfb\xe8\x24\xda\x11\xb2\x14\x52\x50\x25\x82\x79\x92\xf5\x56\x8a\x9d\x4f\xe3\xec\xd8\xcc\x30\x3c\x1f\x17\xb3\x3c\x95\xc9\xdc\x76\xb6\x8f\x24\x8e\x05\xa1\xab\xc1\x7b\x08\x21\x84\x10\x62\xdf\xc0\x95\x8e\xdb\xbe\x86\x10\x62\x87\xcc\xfb\x43\xa1\x2b\xdd\xdc\xe0\xf5\x40\xc7\x6e\x4d\xa6\x0b\x5d\xe9\xe6\x06\xe7\x05\x3a\xd2\x89\xce\x74\xa1\x2b\xdd\xdc\xdc\xb4\xc0\xf0\x01\x3e\x19\x4c\x28\x60\x0a\x41\xa1\xeb\x97\x1f\x2d\xc4\x9f\x70\x70\xe5\xf9\xff\x7f\xb5\xd5\xfc\x2f\x84\xf8\x61\x10\xc7\xdb\x38\xd8\x3b\x10\x2c\x27\x4c\xe3\xde\xd5\xcd\xd6\x9b\x80\xe0\x87\x85\xa7\x6e\x6d\xa1\x2b\xdd\xdc\x6a\x04\x84\xd8\x8a\x57\x00\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func assetsSqlDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlDs_store,
		"assets/sql/.DS_Store",
	)
}

func assetsSqlDs_store() (*asset, error) {
	bytes, err := assetsSqlDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1485311033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlForm5500_search_viewCreate_viewSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xb1\x6e\x83\x30\x14\x45\xf7\x7c\xc5\x1d\x21\x62\xc8\x92\x89\x89\xe2\x97\xca\x52\x02\x95\x4d\xdb\xb4\x8b\x85\xc0\xb4\x48\xc5\x8e\x30\xa5\x1d\xf2\xf1\x35\x4a\x53\xa5\x92\x37\xeb\xd9\xe7\xfa\xbc\xcb\x44\xf9\x80\x43\x56\x91\xe0\xd9\x9e\xbf\x12\xc3\x13\xa7\x67\xf0\x1d\xe8\xc8\x65\x25\xd1\xd9\x71\xd8\x6e\x37\x1b\xe5\x74\x3d\x36\xef\x6a\xee\xf5\x57\xba\xca\x05\x79\x26\x00\x86\x9e\x23\x93\x2b\x20\x92\xb4\xa7\xbc\xc2\x3a\xc1\x64\xd5\xe4\x66\xdd\x4c\x76\x8c\xdc\xc9\x1a\x67\x47\x65\xea\x41\xc7\x38\x9f\x83\x97\xba\x37\xb1\x8f\x00\x6a\x87\xeb\xec\xf2\x81\x9f\xee\x44\x79\xf8\x4b\x67\x5e\x9a\x17\xfe\x50\x16\x88\x4e\x1f\xb5\x51\xe6\x73\x48\x70\x1b\x84\xf5\x05\x59\x54\xd5\x8d\x2b\x4a\xc1\x48\xe0\xee\x05\x41\x2e\x41\x5b\x4f\x5a\x8d\xba\xd1\xfd\xac\x5b\x30\x92\x79\xbc\x08\x75\xd6\xc6\xe9\xea\x5a\x09\x2f\x18\x1d\xd1\xb7\xdf\xaa\x9b\x9c\xfa\xe5\x17\x9b\x60\x33\x8f\x92\x17\xf7\x78\xeb\x4d\xf4\x7f\xad\x38\xfd\x09\x00\x00\xff\xff\x72\x7f\xdf\xc8\x99\x01\x00\x00")

func assetsSqlForm5500_search_viewCreate_viewSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlForm5500_search_viewCreate_viewSql,
		"assets/sql/form5500_search_view/create_view.sql",
	)
}

func assetsSqlForm5500_search_viewCreate_viewSql() (*asset, error) {
	bytes, err := assetsSqlForm5500_search_viewCreate_viewSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/form5500_search_view/create_view.sql", size: 409, mode: os.FileMode(420), modTime: time.Unix(1485305241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlSchedule_c_providersCreate_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x97\xdf\x8b\x9b\x40\x10\xc7\xdf\xf3\x57\x0c\x3e\xe5\x20\x94\xde\x5e\xec\x4b\xe9\xc3\x56\xb7\x74\x5b\xe3\x1e\x1b\x2f\x57\xfa\xb2\x88\x6e\x7b\xd2\x4b\x52\xd4\xa6\xfd\xf3\xbb\x6b\x93\x5c\x88\x73\xba\x52\x0b\x47\xb9\x80\x42\x9c\x1f\x7e\x67\x3e\xc3\x0e\x86\x52\x5c\x43\x42\xdf\x46\x0c\xaa\xec\x4e\xe7\x3f\xee\xb5\xca\xd4\xf7\x72\xbb\x2b\x72\x5d\x56\xaf\x27\x81\x64\x34\x61\x1d\x2e\x13\x80\xa9\xb9\x00\xd2\xec\x9b\x2a\x72\xd8\xa5\x65\x76\x97\x96\x53\xe2\xbf\xba\x98\x35\x86\x4d\xba\xd6\xc8\x63\x5d\x6c\x90\xa7\xd9\x36\xc7\x9c\x4b\x7d\x9f\xd6\xc5\x16\x8b\x58\xa7\xb5\x95\xa5\x6c\xbe\x62\x53\xeb\xaf\xba\x34\xcf\x2f\x8e\xd2\x79\x1c\xb2\x4f\x50\xfc\x52\x46\xfd\x89\x70\xb5\x2b\xf4\x4f\xd5\x68\x13\x31\x5a\x19\x4c\xad\xd5\x31\x51\xa3\xfb\xd1\x44\xd6\xea\x98\xc8\x96\xf1\x68\x1e\x63\x34\x69\x0e\x79\x16\xe6\x26\x39\x8d\xf8\x67\x16\xc2\x8a\xb3\x5b\x3c\x8a\x2e\x27\xd3\x23\xa5\x25\x8b\x58\x90\xc0\x97\xc3\xbb\xd3\xb2\xbe\x54\x45\xad\xd7\x57\x8a\xbc\xbc\xbc\x52\xa6\xcd\xba\xaa\x5f\x78\x34\xf8\xa8\x78\xe8\x41\x5a\xed\xc1\xce\xc0\xbb\x96\x62\xc5\x43\x26\x95\x29\x80\x4b\x93\x46\xc5\x74\xc1\x1a\x1f\xdb\xa9\x19\xc4\x37\x51\x64\xff\x19\x99\xc6\x7d\xc9\xe4\x8a\x07\x4c\x05\x22\xfc\xe3\x64\xbb\xf0\xe0\x74\x40\xda\xc8\x02\x78\x27\xc5\xa2\x4f\xd6\xde\xf5\x83\xe0\x31\xea\x6a\x5f\x50\x9d\x06\xd8\x4e\xba\x96\xfa\xc6\x29\xe3\xd1\x7d\xaf\xc5\xfd\x47\xe3\xb0\x5f\x8b\x14\xb7\x4a\x48\xd3\x63\x67\x39\x0f\x11\x76\xea\xcd\x75\x13\x73\x53\x35\x8d\x22\xcb\x1c\x1c\xa0\xcf\x47\x84\x3e\x26\xf5\xf9\x50\xea\xf3\x7e\xea\xad\x5a\xbb\xdb\xdc\x72\x1f\x93\xfa\x7c\x30\x75\x2c\x02\xa3\xee\x00\xdd\x7f\xa2\xd0\xfd\xa1\xd0\xfd\x7e\xe8\xad\x5a\xbb\xbb\xdc\x72\x1f\x13\xba\x3f\x18\x3a\x16\xd1\x82\xde\x4f\x9d\x0c\x38\xdf\x45\xf2\xde\xdc\xcf\x90\x9f\x9b\x19\x8f\xbd\xde\xc3\xfe\x3c\x48\xb2\x88\x26\x46\xb4\xe7\x3e\x16\xc4\x7d\x03\x10\xd7\x0d\x80\x37\x03\xe1\x80\x64\x1c\x7b\x2c\xc8\x80\x0d\x80\xca\xf9\x9b\xb3\x80\x0c\x58\x00\x4f\x6f\x2a\xdc\x36\x04\x71\xdd\x10\x78\x33\xba\x31\xfc\xab\x0d\x41\x06\x6c\x08\x54\xce\xf3\x54\x3c\x4f\x45\xe7\x54\x34\x63\x71\xf2\x35\xf1\xdf\x7d\x27\xfd\x0e\x00\x00\xff\xff\x11\xba\xe5\x98\xdc\x0e\x00\x00")

func assetsSqlSchedule_c_providersCreate_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlSchedule_c_providersCreate_tableSql,
		"assets/sql/schedule_c_providers/create_table.sql",
	)
}

func assetsSqlSchedule_c_providersCreate_tableSql() (*asset, error) {
	bytes, err := assetsSqlSchedule_c_providersCreate_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/schedule_c_providers/create_table.sql", size: 3804, mode: os.FileMode(420), modTime: time.Unix(1485305241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlSchedule_c_providersSelect_sch_c_part1_item3Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\xcd\x6a\xc4\x20\x10\xc0\xf1\x7b\x9e\x62\x08\x14\x5a\x08\x85\xd0\x73\x0f\x41\x2d\xd8\x26\x5a\x4c\x9b\x1e\x4a\x19\xc4\x58\x2a\xdd\x24\x4b\xf4\xfd\x59\x93\x85\xfd\x80\xc0\xea\x4d\xf8\x39\xfe\xf5\x3e\x03\x68\x59\xcd\xc8\x07\xfc\xa2\x37\x7f\x68\x70\xaf\xe7\x50\xa2\x0b\x76\x78\xc2\xbb\xef\xf2\xc7\xe3\x4e\x07\xeb\xc3\x63\x5e\x91\x37\xe4\x34\x07\xed\x41\x9b\x7f\x74\x7d\x01\xf9\xbb\x92\x1d\xa7\x4c\x21\x17\x94\xab\x38\x07\x45\xd5\xb0\xd5\x8c\x7a\xb0\x05\x88\xcf\xba\x5e\x76\xd6\x8d\x91\xb7\x4c\x75\x9c\x30\x24\x92\x1e\x91\x99\xfa\x0b\x34\xdb\x78\x97\x9b\xc6\x58\x05\xf0\xa2\x64\x73\xb3\x6a\x95\xaf\x92\x8b\x4d\xb9\x4c\xf7\x57\x1e\xe4\xb6\xdc\x7c\xe9\x73\xda\xcc\x93\x5f\x63\xd2\x57\x25\x68\x42\x8b\x92\x5f\x28\x55\xfc\xe2\xf4\x9c\xf3\x91\xec\xe1\x10\x00\x00\xff\xff\x54\xf9\x46\x7c\xe2\x01\x00\x00")

func assetsSqlSchedule_c_providersSelect_sch_c_part1_item3SqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlSchedule_c_providersSelect_sch_c_part1_item3Sql,
		"assets/sql/schedule_c_providers/select_sch_c_part1_item3.sql",
	)
}

func assetsSqlSchedule_c_providersSelect_sch_c_part1_item3Sql() (*asset, error) {
	bytes, err := assetsSqlSchedule_c_providersSelect_sch_c_part1_item3SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/schedule_c_providers/select_sch_c_part1_item3.sql", size: 482, mode: os.FileMode(420), modTime: time.Unix(1485305241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2Sql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x41\x4b\x44\x21\x14\x85\xf7\xf3\x2b\x2e\x0f\x82\x82\x08\xa6\x7d\x0b\xd1\x1b\x59\x33\xde\x70\x1e\xd3\x22\xe2\x22\x8e\x91\xd4\xbc\x89\xd1\xff\x4f\xe6\x83\x22\x12\x46\x17\x6e\xce\x77\xf4\xe3\x9c\x2f\x00\x36\xb8\x42\x39\xc2\x2b\x27\xff\xc6\x9e\x3f\xdd\x31\x2f\x39\xe6\xb0\xbf\xe6\xb3\xe7\xe5\x4b\xe2\x0f\x97\x43\xca\x57\x83\x90\x0f\xac\xd5\x00\x2e\x81\xf3\xef\x1c\x77\x97\x30\x3c\x5a\xda\x6a\x85\x96\x69\xbc\x2b\xb7\x11\x6b\xac\xc0\xe4\xf6\xe1\x7f\x8c\xda\xd4\x34\xc4\xa9\x84\x1b\xb4\x5b\x2d\x91\x25\xa9\xb9\xe4\x0f\xbb\x46\xc9\xe2\x4a\x8c\x9a\xe6\xe6\x31\x14\x9b\x78\x98\x8a\x37\xc0\xad\xa5\xf5\x49\xef\x4a\xde\x93\x36\x4d\xf2\xfb\xcb\xf4\x87\x07\x6a\x93\xcd\x2d\x6e\xfa\xde\xfc\xe1\xab\x4c\xff\x11\x46\x75\xb8\x58\x7a\x62\xb2\x65\xb0\x7e\x9d\xdf\xca\xe2\xe2\x2b\x00\x00\xff\xff\x33\x16\x28\x08\x04\x02\x00\x00")

func assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2SqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2Sql,
		"assets/sql/schedule_c_providers/select_sch_c_part_1_item2.sql",
	)
}

func assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2Sql() (*asset, error) {
	bytes, err := assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2SqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/schedule_c_providers/select_sch_c_part_1_item2.sql", size: 516, mode: os.FileMode(420), modTime: time.Unix(1485305241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlZip_codesCreate_search_functionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x8e\x9b\x30\x14\xbc\xef\x57\xbc\xc3\x4a\x0b\x12\xea\xa1\x52\x7b\x48\x76\xab\xb2\xe4\x25\x45\xa2\x66\x6b\x8c\xda\x9e\x90\x17\x9c\xc4\x12\x01\x0a\xa6\x52\xfb\xf5\x35\x60\x02\x51\x68\xab\xaa\x7b\x0a\x9e\x19\xcf\xd8\xf3\x1c\x8f\xa2\xcb\x10\xf0\x0b\x43\x12\xf9\x21\x01\x7f\x0b\x24\x64\x1a\xf0\x23\x16\x41\xda\x3e\x8b\xf5\xcd\x5f\x44\x82\xd7\xea\x98\xc9\x46\xf1\x22\xd5\xea\x0d\x0d\x9f\x60\x1b\x13\x8f\x19\xa9\x91\xb5\xd9\x3e\x19\x55\x89\x2c\x92\x93\xcc\x45\x93\xec\xeb\xf2\x94\xfc\x94\x95\x35\xac\x41\x16\x4a\x1c\x44\xed\x40\x07\x8e\x2b\xfb\x7c\x86\x90\x02\xc5\xa7\xc0\xf5\x70\x8a\xf8\x1f\xe3\x1b\xd0\x7e\x2c\xa6\x24\x02\xc5\x9f\x73\x01\x96\x46\x00\x66\x12\xa7\x07\x52\xa9\x7e\xc0\x77\x5e\xa7\x47\x5e\x5b\xaf\xdf\xbc\xb5\x07\x58\x87\x2a\x31\xe1\x06\xcd\xb9\x92\xaa\xcd\x04\x64\x65\xdb\x79\x56\xb5\x48\x65\x23\xcb\xc2\xd0\x65\x71\xf8\x13\x3f\xde\xe5\x8a\xd6\xac\x0d\x6e\xa4\x7f\x6e\x6f\x7b\xe5\x06\xbd\xc0\xa5\xd8\x7f\x03\x24\xda\xf8\x6a\xcf\xfa\x4c\x72\xf5\x1b\xf2\x11\x77\x3e\x99\x7b\xac\x1e\xc0\x8a\x30\x40\x8f\x75\x45\x24\x69\x99\x89\xe6\xd5\x74\xea\x2d\x0d\x3f\x4e\x04\x7c\xfe\x80\x14\x67\xc2\xae\xbb\x87\xbe\x65\xfb\x22\x7c\xd9\x75\xac\xea\xdf\x4d\x87\xb9\xc1\xa7\x18\xe9\x57\x03\x5d\xd9\xeb\x2f\x67\xb6\xec\xc7\x35\x07\xba\xb1\x3a\x0b\xc7\x71\x96\x2e\xee\x98\x14\x80\xaa\xd4\x8f\xc3\xea\xba\x72\xfa\xbb\xd9\x70\xff\xfe\x9d\x41\x97\x36\x2e\x24\xd8\xab\x55\xaf\x07\xde\x4c\x03\xbf\x2c\xe1\x1c\x37\x94\x61\xbd\x44\x2a\xdc\xc3\xf0\x7f\x30\x35\x22\xd9\x0c\xcf\x29\x70\xc9\x2e\x76\x77\x08\x77\x55\x5e\x1d\x9a\x6f\xf9\x1d\x44\xcc\x7d\x0c\x70\xfd\x2b\x00\x00\xff\xff\x5d\xd0\x05\x19\x23\x04\x00\x00")

func assetsSqlZip_codesCreate_search_functionSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlZip_codesCreate_search_functionSql,
		"assets/sql/zip_codes/create_search_function.sql",
	)
}

func assetsSqlZip_codesCreate_search_functionSql() (*asset, error) {
	bytes, err := assetsSqlZip_codesCreate_search_functionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/zip_codes/create_search_function.sql", size: 1059, mode: os.FileMode(420), modTime: time.Unix(1485305241, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSqlZip_codesCreate_tableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xa8\xca\x2c\x88\x4f\xce\x4f\x49\x2d\xb6\xe6\x72\x0e\x72\x75\x0c\x71\x85\xaa\x80\x8b\x2b\x68\x70\x29\x80\x78\x0a\x99\x79\x25\xa9\xe9\xa9\x45\x3a\x40\x6e\x72\x66\x49\xa5\x42\x59\x62\x51\x72\x46\x62\x91\x86\x91\xa9\x99\x26\x48\xb0\xb8\x24\xb1\x24\x15\x21\x0a\x16\xcb\x49\x2c\xc9\x2c\x29\x4d\x49\x55\x48\xc9\x2f\x4d\xca\x49\x55\x28\x28\x4a\x4d\xce\x2c\xce\xcc\xcf\x03\x4b\xe6\xe7\xa5\xe3\x96\x2d\xc9\xcc\x4d\xad\xca\xcf\x4b\x45\xb6\x37\xa5\xb8\x04\xc6\xe5\xd2\xb4\x06\x04\x00\x00\xff\xff\x77\x96\xd1\x0e\xd0\x00\x00\x00")

func assetsSqlZip_codesCreate_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSqlZip_codesCreate_tableSql,
		"assets/sql/zip_codes/create_table.sql",
	)
}

func assetsSqlZip_codesCreate_tableSql() (*asset, error) {
	bytes, err := assetsSqlZip_codesCreate_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/sql/zip_codes/create_table.sql", size: 208, mode: os.FileMode(420), modTime: time.Unix(1485311375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/.DS_Store": assetsDs_store,
	"assets/sql/.DS_Store": assetsSqlDs_store,
	"assets/sql/form5500_search_view/create_view.sql": assetsSqlForm5500_search_viewCreate_viewSql,
	"assets/sql/schedule_c_providers/create_table.sql": assetsSqlSchedule_c_providersCreate_tableSql,
	"assets/sql/schedule_c_providers/select_sch_c_part1_item3.sql": assetsSqlSchedule_c_providersSelect_sch_c_part1_item3Sql,
	"assets/sql/schedule_c_providers/select_sch_c_part_1_item2.sql": assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2Sql,
	"assets/sql/zip_codes/create_search_function.sql": assetsSqlZip_codesCreate_search_functionSql,
	"assets/sql/zip_codes/create_table.sql": assetsSqlZip_codesCreate_tableSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{assetsDs_store, map[string]*bintree{}},
		"sql": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{assetsSqlDs_store, map[string]*bintree{}},
			"form5500_search_view": &bintree{nil, map[string]*bintree{
				"create_view.sql": &bintree{assetsSqlForm5500_search_viewCreate_viewSql, map[string]*bintree{}},
			}},
			"schedule_c_providers": &bintree{nil, map[string]*bintree{
				"create_table.sql": &bintree{assetsSqlSchedule_c_providersCreate_tableSql, map[string]*bintree{}},
				"select_sch_c_part1_item3.sql": &bintree{assetsSqlSchedule_c_providersSelect_sch_c_part1_item3Sql, map[string]*bintree{}},
				"select_sch_c_part_1_item2.sql": &bintree{assetsSqlSchedule_c_providersSelect_sch_c_part_1_item2Sql, map[string]*bintree{}},
			}},
			"zip_codes": &bintree{nil, map[string]*bintree{
				"create_search_function.sql": &bintree{assetsSqlZip_codesCreate_search_functionSql, map[string]*bintree{}},
				"create_table.sql": &bintree{assetsSqlZip_codesCreate_tableSql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

